#!/usr/bin/python3
# -*- coding: utf-8 -*-

import os, sys, time
import argparse
import re
import subprocess

def get_parser() :
	# Fonction permettant de pourvoir demander des arguments

	parser = argparse.ArgumentParser(description= \
		"Find ARM, virulence and toxin genes running ABRicate", \
			formatter_class=argparse.ArgumentDefaultsHelpFormatter)

	parser.add_argument("-nas", action="store", dest="nas", 
					type=str, required=True, help="NAS assembly point")

	parser.add_argument("-w", action="store", dest="workdir", type=str, default=".", help="working directory")

	#parser.add_argument("-r", action="store", dest="resdir", 
	#					type=str, default="abricateResults", help="results directory name")
		
	parser.add_argument("-T", action="store", dest="nbThreads", type=str, default=1, help="number of theard to use")

	parser.add_argument("-strainid", action="store", dest="strainid", type=str, default="", help="strain ID")

	parser.add_argument("--overwitedb", action="store_true", dest="overwitedb", default=False, help="strain ID")

	parser.add_argument("--nowritedb", action="store_true", dest="nowritedb", default=True, help="don't write infos in the database")
	

	return parser

class genome(object) :

	def __init__(self) :
		self.ID = ""
		self.fastaFile = ""
		self.genre = ""


	def setID(self, ID) :
		self.ID = ID


	def setFastaFile(self, fastaFile) :
		self.fastaFile = fastaFile

	def setGenre(self, genre) :
		self.genre = genre


def getAllGenomesObjects(dicoGenomes, ID = None) :
	uri = "mongodb://Manager:reganaM@localhost/GAMeRdb"
	client = MongoClient(uri)

	db = client.GAMeRdb
	genomes = db.GENOME

	
	#for genre in glob.glob("/global/bio/data/GAMeR_DB/*") :
	#	print(genre.split('/')[-1])

	#idsPath = glob.glob("/global/bio/data/GAMeR_DB/*/*")
	#IDs = []		

	#for path in idsPaths :
	#ID = path.split('/')[-1]
	#IDs.append(ID)


	if ID is None : 
		infos = genomes.find()	
	
	else : 
		infos = find({SampleID:ID})
		
	for info in infos :
		genesCollection = genomes.find({"SampleID":info['SampleID']},{"Genes":1,"_id":0})

		for element in genesCollection :
			if element == {} :
				dicoGenomes[info['SampleID']] = genome()
				dicoGenomes[info['SampleID']].setID(info['SampleID'])
				dicoGenomes[info['SampleID']].setFastaFile(info['Genome']['Assembly'])
				dicoGenomes[info['SampleID']].setGenre(info['Phylogeny']['Genus'])



def makeGenialInputFile(fastaPath, ID, genomeDir) : 
	inputFileName = genomeDir + "GENIAL_input.tsv"
	inputFile = open(inputFileName, "w")

	inputFile.write(fastaPath + "\t" + ID + "\n") 

	inputFile.close()

	return inputFileName


# fonction qui crée un fichier sbatch et le lance
def genialSlurm(sbatchName, genialCmd, dependencies="", condaEnv = "genial_db", nbThreads = 1, sync = 0) :
	sbatchFile = open(sbatchName, "w")

	sbatchFile.write("#!/bin/bash\n")
	sbatchFile.write("#SBATCH -J " + sbatchName.split(".")[0] + "\n")

	if sync != 0 :
		sbatchFile.write("#SBATCH -W\n")

	sbatchFile.write("#SBATCH --cpus-per-task=" + str(nbThreads) + "\n")
	sbatchFile.write("#SBATCH -o %x.%N.%j.out" + "\n")
	sbatchFile.write("#SBATCH -e %x.%N.%j.err" + "\n")
	sbatchFile.write("#SBATCH -p Research\n")

	sbatchFile.write("source /global/conda/bin/activate\n")
	sbatchFile.write("conda activate\n")
	sbatchFile.write("conda activate " + condaEnv + "\n\n")

	sbatchFile.write(str(genialCmd) + "\n")

	sbatchFile.close()

	slurmCmd=["sbatch " + dependencies + " " + sbatchName]
	
	return(re.findall(r'\d+',subprocess.check_output(slurmCmd, shell=True))[0])


		


def runGENIAL(dicoGenomes, nas, nbThreads, workdir, resdir) :

	if not os.path.exists(workdir + resdir) : # création du répertoire de toutes les souches
			os.system("mkdir " + workdir + resdir)

	
	for genome in dicoGenomes : # pour chaque génome
		
		genomeDir = workdir + resdir + "GENIALslurm_" + dicoGenomes[genome].ID + "/" # nom du répertoire de la souche

		if not os.path.exists(genomeDir) : # création du répertoire de la souche
			os.system("mkdir " + genomeDir) 
		
		fastaPath = nas + dicoGenomes[genome].fastaFile # chemin du fichier fasta
		inputFile = makeGenialInputFile(fastaPath, genome, genomeDir) # création du fichier d'entrée de GENIAL
			
		sbatchFiles = [] # liste des fichier sbatch (1 part base de donnés)

		resfinderCmd = "GENIALanalysis -f " + inputFile + " -defaultdb resfinder -T " + nbThreads + " -w " + genomeDir + " -r resfinder --no_GENIALresult_file" # commande resfinder
		sbatchFiles.append(genomeDir + dicoGenomes[genome].ID + "_resfinder.sh") # ajout du fichier à la liste des sbatch

		vfdbCmd = "GENIALanalysis -f " + inputFile + " -defaultdb vfdb -T " + nbThreads + " -w " + genomeDir + " -r vfdb --no_GENIALresult_file" # commande vfdb
		sbatchFiles.append(genomeDir + dicoGenomes[genome].ID + "_vfdb.sh") # ajout du fichier à la liste des sbatch
		
		if dicoGenomes[genome].genre == "Salmonella" :
			entorotoxCmd = "GENIALanalysis -f " + inputFile + " -defaultdb enterotox_staph -T " + nbThreads + " -w " + genomeDir + " -r enterotox_staph --no_GENIALresult_file" # commande enterotox_staph
			sbatchFiles.append(genomeDir + dicoGenomes[genome].ID + "_enterotox.sh") # ajout du fichier à la liste des sbatch
		
		jobIds = [] # id des jobs slurm

		jobIds.append(genialSlurm(sbatchFiles[0], resfinderCmd, nbThreads = nbThreads)) # ajout id du job resfinder
		jobIds.append(genialSlurm(sbatchFiles[1], vfdbCmd, nbThreads = nbThreads)) # ajout id du job vfdb
		
		if dicoGenomes[genome].genre == "Salmonella" :
			jobIds.append(genialSlurm(sbatchFiles[2], enterotoxCmd, nbThreads = nbThreads)) # ajout id du job enterotox_staph

		genialSlurm("empty", "echo Finish", depedencies = "--dependency:afterok:" + ":".join(jobIds), sync = 1) # job vide pour que le programme attende la fin des jobs
		os.system("rm " + inputFile)  # suppression du fichier d'entrée de GENIAL
		
		for sbatchFile in sbatchFiles : # suppression des fichie sbach de chaque base de données
			os.system("rm " + sbatchFile) 


		os.system("mv " + genomeDir + "GENIAL_" + dicoGenomes[genome].ID + "_" + resfinder " " + nas + "GAMeRdb/" + dicoGenomes[genome].genre + "/" +  dicoGenomes[genome].ID + "/" # déplacer le fichier arbicate dans le nas
		os.system("mv " + genomeDir + "GENIAL_" + dicoGenomes[genome].ID + "_" + vfdb " " + nas + "GAMeRdb/" + dicoGenomes[genome].genre + "/" +  dicoGenomes[genome].ID + "/" # déplacer le fichier arbicate dans le nas
		os.system("mv " + genomeDir + "GENIAL_" + dicoGenomes[genome].ID + "_" + enterotox_staph " " + nas + "GAMeRdb/" + dicoGenomes[genome].genre + "/" +  dicoGenomes[genome].ID + "/" # déplacer le fichier arbicate dans le nas


	os.system("rm -r " + workdir + resdir) # Suppression du dossier avec le résultat de toute sles souches



def main():
	
	##################### gets arguments #####################

	parser=get_parser()
	
	#print parser.help if no arguments
	if len(sys.argv)==1:
		parser.print_help()
		sys.exit(1)
	
	# mettre tout les arguments dans la variable Argument
	Arguments=parser.parse_args()

	WORKDIR = Arguments.workdir
	#RESDIR = Arguments.resdir
	#DIR = WORKDIR + RESDIR 

	dicoGenomes = {}

	if Arguments.nas[-1] != "/" :
		Arguments.nas += "/"

	

	if WORKDIR[-1] != "/" :
		WORKDIR += "/"

	#if RESDIR[-1] != "/" : 
	#	RESDIR += "/"


	#if not os.path.exists(DIR) :
	#	os.system("mkdir " + DIR) 



	if Arguments.strainid is "" :

		
		#GENIALslurm(dicoGenomes)
		dicoGenomes["XSD0471"] = genome()
		dicoGenomes["XSD0471"].setID("XSD0471")
		dicoGenomes["XSD0471"].setFastaFile(Arguments.nas + "data/GAMeR_DB/SALMONELLA/XSD0471/XSD0471_contigs.fasta")
		dicoGenomes["XSD0471"].setGenre("Salmonella")


	else : 
		getGenomesObjects(dicoGenomes, ID = Arguments.strainid)
		

				


	runGENIAL(dicoGenomes, Arguments.nas, Arguments.nbThreads, WORKDIR)


		

# lancer la fonction main()  au lancement du script
if __name__ == "__main__":
	main()	
