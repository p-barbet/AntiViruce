#!/usr/bin/python3
# -*- coding: utf-8 -*-


import os, sys, time
import argparse


def get_parser() :
	# Fonction permettant de pourvoir demander des arguments

	parser = argparse.ArgumentParser(description= \
		"Identify genes with Abricate running GENIALanalysis and GENIALresults", \
			formatter_class=argparse.ArgumentDefaultsHelpFormatter)

	parser.add_argument("-f", action="store", dest="input", 
					type=str, required=True, help="tsv file with FASTA files paths and strains IDs (REQUIRED)")

	db_type = parser.add_mutually_exclusive_group(required=True)

	db_type.add_argument("-defaultdb", action="store", dest="defaultDatabase", \
					type=str, choices=["resfinder", "vfdb", "enterotox_staph", "phages", "spi"], help="default \
						database to use (resfinder, vfdb, enterotox_staph, phages. Incompatible with -privatedb)")

	db_type.add_argument("-privatedb", action="store", dest="privateDatabase", \
					type=str, help="private database name. Implies -dbp, -dbf. Incompatible with -defaultdb")

	parser.add_argument("-dbf", action="store", dest="privatedbFasta", \
					type=str, help="Multifasta containing \
						the private database sequences. Implies -dbp, -privatedb")	

	parser.add_argument("-T", action="store", dest="nbThreads", 
					type=str, default="1", help="number of theard to use")

	parser.add_argument("-w", action="store", dest="workdir", type=str, default=".", help="working directory")

	parser.add_argument("-r", action="store", dest="resdir", 
					type=str, default="ABRicate_results", help="results directory name")

	parser.add_argument("-mincov", action="store", dest="mincov", \
					type=str, default="80", help="Minimum proportion of gene covered")

	parser.add_argument("-minid", action="store", dest="minid", \
					type=str, default="90", help="Minimum proportion of exact nucleotide matches")

	parser.add_argument("--R", action="store_true", dest="remove",
					default=False, help="remove genes present in all genomes from the matrix")

	parser.add_argument("--no_heatmap", action="store_true", dest="no_heatmap",
                                        default=False, help="the heatmaps are not produced in output")


	return parser


def main():
	
	##################### gets arguments #####################

	parser=get_parser()
	
	#print parser.help if no arguments
	if len(sys.argv)==1:
		parser.print_help()
		sys.exit(1)
	
	# mettre tout les arguments dans la variable Argument
	Arguments=parser.parse_args()

	if Arguments.privateDatabase is not None and (Arguments.privatedbFasta is None) :
		 parser.error("-privatedb argument requires -dbf.")

	if Arguments.defaultDatabase is not None and (Arguments.privatedbFasta is not None) :
		 parser.error("-defaultdb argument not requires -dbf.")

	begin = time.time()


	if Arguments.workdir[-1] != "/" :
		Arguments.workdir += "/"

	if Arguments.resdir[-1] != "/" : 
		Arguments.resdir += "/"

	if Arguments.defaultDatabase is not None :

		os.system("GENIALanalysis -f " +  Arguments.input + " -T " + Arguments.nbThreads + " -defaultdb " + Arguments.defaultDatabase + " -r " + Arguments.resdir + " -minid " + Arguments.minid + " -mincov " + Arguments.mincov + " -w " + Arguments.workdir + " --mob_recon")

		if os.path.isfile(Arguments.workdir + Arguments.resdir + "ABRicate_files.tsv") :  # vérifie que le fichier abricate_files.tsv existe
			if Arguments.remove :
				if Arguments.no_heatmap :
					os.system("GENIALresults -f " + Arguments.workdir + Arguments.resdir + "ABRicate_files.tsv -w " + Arguments.workdir + " -r " + Arguments.resdir + " -defaultdb " + Arguments.defaultDatabase + " --R --no_heatmap")

				else :
					os.system("GENIALresults -f " + Arguments.workdir + Arguments.resdir + "ABRicate_files.tsv -w " + Arguments.workdir + " -r " + Arguments.resdir + " -defaultdb " + Arguments.defaultDatabase + " --R")

			else :
				if Arguments.no_heatmap :
					os.system("GENIALresults -f " + Arguments.workdir + Arguments.resdir + "ABRicate_files.tsv -w " + Arguments.workdir + " -r " + Arguments.resdir + " -defaultdb " + Arguments.defaultDatabase + " --no_heatmap")

				else :
					os.system("GENIALresults -f " + Arguments.workdir + Arguments.resdir + "ABRicate_files.tsv -w " + Arguments.workdir + " -r " + Arguments.resdir + " -defaultdb " + Arguments.defaultDatabase)


	else :
		
		os.system("GENIALanalysis -f " +  Arguments.input + " -T " + Arguments.nbThreads + " -privatedb " + Arguments.privateDatabase + " -dbf " + Arguments.privatedbFasta + " -r " + Arguments.resdir + " -minid " + Arguments.minid + " -mincov " + Arguments.mincov + " -w " + Arguments.workdir + " --mob_recon")

		if os.path.isfile(Arguments.workdir + Arguments.resdir + "ABRicate_files.tsv") : # Vérifie que le fichier abricate_files.tsv existe
			if Arguments.remove :
				if Arguments.no_heatmap :
					os.system("GENIALresults -f " + Arguments.workdir + Arguments.resdir + "ABRicate_files.tsv -w " + Arguments.workdir + " -r " + Arguments.resdir + " -privatedb --R --no_heatmap")

				else :
					os.system("GENIALresults -f " + Arguments.workdir + Arguments.resdir + "ABRicate_files.tsv -w " + Arguments.workdir + " -r " + Arguments.resdir + " -privatedb --R")

			else :
				if Arguments.no_heatmap :
					os.system("GENIALresults -f " + Arguments.workdir + Arguments.resdir + "ABRicate_files.tsv -w " + Arguments.workdir + " -r " + Arguments.resdir + " -privatedb --no_heatmap")


				else :
					os.system("GENIALresults -f " + Arguments.workdir + Arguments.resdir + "ABRicate_files.tsv -w " + Arguments.workdir + " -r " + Arguments.resdir + " -privatedb")

	end = time.time()

	print ("Total execution time : " + str(round(end - begin,3)) + " seconds")

# lancer la fonction main()  au lancement du script
if __name__ == "__main__":
	main()	
